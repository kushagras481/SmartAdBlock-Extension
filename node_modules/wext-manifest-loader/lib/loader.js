"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loader = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const schema_utils_1 = __importDefault(require("schema-utils"));
const loader_utils_1 = require("loader-utils");
const LOADER_NAME = 'wext-manifest-loader';
const packageJSONPath = path_1.default.resolve('./package.json');
const browserVendors = ['chrome', 'firefox', 'opera', 'edge'];
const envVariables = ['dev', 'prod'];
const vendorRegExp = new RegExp(`^__((?:(?:${browserVendors.join('|')})\\|?)+)__(.*)`);
const environmentRegExp = new RegExp(`^__((?:(?:${envVariables.join('|')})))__(.*)`);
var ENVKeys;
(function (ENVKeys) {
    ENVKeys["DEV"] = "dev";
    ENVKeys["PROD"] = "prod";
})(ENVKeys || (ENVKeys = {}));
const schema = {
    type: 'object',
    properties: {
        usePackageJSONVersion: {
            type: 'boolean',
        },
    },
};
const transformVendorKeys = (manifest, selectedVendor) => {
    if (Array.isArray(manifest)) {
        return manifest.map((newManifest) => {
            return transformVendorKeys(newManifest, selectedVendor);
        });
    }
    if (typeof manifest === 'object') {
        return Object.entries(manifest).reduce((newManifest, [key, value]) => {
            const vendorMatch = key.match(vendorRegExp);
            if (vendorMatch) {
                const vendors = vendorMatch[1].split('|');
                if (vendors.includes(selectedVendor)) {
                    newManifest[vendorMatch[2]] = transformVendorKeys(value, selectedVendor);
                }
            }
            else {
                const envMatch = key.match(environmentRegExp);
                if (envMatch) {
                    const isProd = process.env.NODE_ENV === 'production';
                    const envKey = envMatch[1];
                    if ((!isProd && envKey === ENVKeys.DEV) ||
                        (isProd && envKey === ENVKeys.PROD)) {
                        newManifest[envMatch[2]] = transformVendorKeys(value, selectedVendor);
                    }
                }
                else {
                    newManifest[key] = transformVendorKeys(value, selectedVendor);
                }
            }
            return newManifest;
        }, {});
    }
    return manifest;
};
function loader(source) {
    if (this.cacheable) {
        this.cacheable();
    }
    this.addDependency(packageJSONPath);
    const options = loader_utils_1.getOptions(this);
    schema_utils_1.default(schema, options, {
        name: 'Wext Manifest Loader',
    });
    const usePackageJSONVersion = (options.usePackageJSONVersion && true) || false;
    let content = {};
    if (typeof source === 'string') {
        try {
            content = JSON.parse(source);
        }
        catch (err) {
            this.emitError(err);
        }
    }
    const vendor = process.env.TARGET_BROWSER;
    if (vendor) {
        if (!browserVendors.includes(vendor)) {
            return this.emitError(`${LOADER_NAME}: browser ${vendor} is not supported`);
        }
    }
    else {
        return this.emitError(`${LOADER_NAME}: TARGET_BROWSER variable missing`);
    }
    const manifest = transformVendorKeys(content, vendor);
    if (usePackageJSONVersion) {
        try {
            const packageJSON = JSON.parse(fs_1.default.readFileSync(packageJSONPath, 'utf-8'));
            manifest.version = packageJSON.version.replace('-beta.', '.');
        }
        catch (err) {
            this.emitError(err);
        }
    }
    const outputPath = loader_utils_1.interpolateName(this, 'manifest.json', {
        source,
    });
    const publicPath = `__webpack_public_path__ + ${JSON.stringify(outputPath)}`;
    const formattedJson = JSON.stringify(manifest, null, 2)
        .replace(/\u2028/g, '\\u2028')
        .replace(/\u2029/g, '\\u2029');
    this.emitFile(outputPath, formattedJson);
    return `module.exports = ${publicPath};`;
}
exports.loader = loader;
